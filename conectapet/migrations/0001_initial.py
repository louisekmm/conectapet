# Generated by Django 2.2a1 on 2020-11-09 02:34

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('permission_ong', models.CharField(blank=True, choices=[('Editar tudo', 'Editar tudo'), ('Editar equipe e pets', 'Editar equipe e pets'), ('Editar pets', 'Editar pets'), ('Visualizar equipe e pets', 'Visualizar equipe e pets'), ('Visualizar pets', 'Visualizar pets')], max_length=30, null=True)),
                ('role_ong', models.CharField(blank=True, choices=[('Advogado(a)', 'Advogado(a)'), ('Auxiliar de veterinrio', 'Auxiliar de veterinrio'), ('Bilogo(a)', 'Bilogo(a)'), ('Colaborador(a)', 'Colaborador(a)'), ('Departamento administrativo', 'Departamento administrativo'), ('Departamento de atendimento', 'Departamento de atendimento'), ('Departamento de eventos', 'Departamento de eventos'), ('Departamento educativo', 'Departamento educativo'), ('Departamento de marketing', 'Departamento de marketing'), ('Departamento financeiro', 'Departamento financeiro'), ('Diretor(a) administrativo', 'Diretor(a) administrativo'), ('Diretor(a) de eventos', 'Diretor(a) de eventos'), ('Diretor(a) financeiro', 'Diretor(a) financeiro'), ('Diretor(a) geral', 'Diretor(a) geral'), ('Diretor(a) marketing', 'Diretor(a) marketing'), ('Diretor(a) tcnico', 'Diretor(a) tcnico'), ('Funcionrio(a)', 'Funcionrio(a)'), ('Fundador(a)', 'Fundador(a)'), ('Presidente', 'Presidente'), ('Protetor(a) associado', 'Protetor(a) associado'), ('Secretrio(a)', 'Secretrio(a)'), ('Suplente de secretrio', 'Suplente de secretrio'), ('Suplente de presidente', 'Suplente de presidente'), ('Suplente de vice-presidente', 'Suplente de vice-presidente'), ('Tesoreiro(a)', 'Tesoreiro(a)'), ('Veterinrio(a)', 'Veterinrio(a)'), ('Vice-presidente', 'Vice-presidente'), ('Voluntrio(a)', 'Voluntrio(a)')], max_length=30, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('has_confirmed_email', models.BooleanField(default=0)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('state_code', models.CharField(blank=True, max_length=3, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('rg', models.CharField(blank=True, max_length=12, null=True)),
                ('cpf', models.CharField(blank=True, max_length=15, null=True)),
                ('phone_number_ddd', models.CharField(max_length=3, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('address_street', models.CharField(blank=True, max_length=70, null=True)),
                ('address_number', models.CharField(blank=True, max_length=6, null=True)),
                ('address_complement', models.CharField(blank=True, max_length=10, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('facebook_id', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
